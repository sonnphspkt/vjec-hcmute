// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  STUDENT
  EMPLOYER
  ADMIN
}

enum JobType {
  FULLTIME
  PARTTIME
  INTERNSHIP
  REMOTE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

// Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Optional for OAuth users
  fullName      String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  studentProfile  StudentProfile?
  employerProfile EmployerProfile?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model StudentProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  major     String?
  skills    String // JSON string array
  resumeUrl String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model EmployerProfile {
  id       String  @id @default(cuid())
  userId   String  @unique
  company  String
  verified Boolean @default(false)

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPosts JobPost[]

  @@map("employer_profiles")
}

model JobPost {
  id             String   @id @default(cuid())
  title          String
  description    String
  salary         String
  country        String
  jobType        JobType
  category       String
  skills         String // JSON string array
  employerId     String
  approved       Boolean  @default(false)
  
  // External job source fields
  externalSource String? // Source: TOPCV, VIETNAMWORKS, etc.
  externalId     String? // Original job ID from external source
  externalUrl    String? // Link to original job posting
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  employer EmployerProfile @relation(fields: [employerId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@unique([externalSource, externalId]) // Prevent duplicate imports
  @@map("job_posts")
}

model Payment {
  id        String        @id @default(cuid())
  jobPostId String
  amount    Int
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  jobPost JobPost @relation(fields: [jobPostId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  excerpt     String
  content     String
  image       String?
  category    String
  author      String
  publishedAt DateTime @default(now())
  views       Int      @default(0)
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("articles")
}
